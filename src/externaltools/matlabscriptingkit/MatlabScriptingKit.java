package proteus.externaltools.matlabscriptingkit;

import java.io.*;
import java.util.*;


public class MatlabScriptingKit {
	// Everything in here is broken except for batch. Make sure your batch command has an exit command at the end.
	public final String ANSI_RESET = "\u001B[0m";
	public final String ANSI_BLACK = "\u001B[30m";
	public final String ANSI_RED = "\u001B[31m";
	public final String ANSI_GREEN = "\u001B[32m";
	public final String ANSI_YELLOW = "\u001B[33m";
	public final String ANSI_BLUE = "\u001B[34m";
	public final String ANSI_PURPLE = "\u001B[35m";
	public final String ANSI_CYAN = "\u001B[36m";
	public final String ANSI_WHITE = "\u001B[37m";
	public final String ANSI_BOLD = "\u001B[1m";


	Process runningProcess;
	PrintWriter stdin;
	Scanner stdout;

	public MatlabScriptingKit() {

		// Generate the workspace
		File matlabscriptingworkspacedir = new File("matlabscriptingworkspace");
                if (!matlabscriptingworkspacedir.exists()) {
                        matlabscriptingworkspacedir.mkdir();
                }
	}

// for batch processing of given scripts
	public String decorateFilename( String base ) {
		double randomID = Math.round(Math.random());
		Date date = new Date();
		return "matlabscriptingworkspace/" + base + + date.getTime() + "." + randomID + ".m";
	}
	public String generateFilename() {
		double randomID = Math.round(Math.random());
		Date date = new Date();
		return "matlabscriptingworkspace/script." + date.getTime() + "." + randomID + ".m";
	}

	public String batch( String scriptText ) throws Exception {
		String absoluteFileName = writeScriptFile( scriptText, generateFilename() );
		String output = runBatch( absoluteFileName );
		return output;
	}

	public String batch( String scriptText, String fileName ) throws Exception {
		// To allow finding the file more easily, we accept suggestions
		// about what the file should be named.
		String absoluteFileName = writeScriptFile( scriptText, decorateFilename( fileName  ));
		String output = runBatch( absoluteFileName );
		return output;
	}

	protected String writeScriptFile( String scriptText, String fileName ) throws Exception {
		// This exit is important! Or matlab will hang. It's so important that
		// I don't trust external functions to provide it.
		scriptText = scriptText + "\nexit;\n";
		scriptText = timeStampScript( scriptText );

		PrintWriter scriptWriter = new PrintWriter( fileName );
		scriptWriter.println( scriptText );
		scriptWriter.close();

		File thisFile = new File( fileName );
		return thisFile.getAbsolutePath();
	}

	protected String timeStampScript( String scriptText ) {
		Date date = new Date();
		String stampedScript = "%% Automatically generated by Proteus on " + date.toString() + "\n\n";
		stampedScript = stampedScript + scriptText;
		
		return scriptText;
	}

	
	protected String runBatch( String scriptName ) {
		// If matlab cannot run, the output string will contain this error message
		String returnString = ANSI_RED + ANSI_BOLD + "ERROR! Could not run matlab script" + ANSI_RESET;
		try {
			ProcessBuilder builder = new ProcessBuilder("matlab",
								"-nodesktop",
								"-nosplash",
								"< " + scriptName );
			builder.redirectErrorStream(true);
			Process process = builder.start();
			InputStream is = process.getInputStream();
			BufferedReader reader = new BufferedReader (new InputStreamReader(is));

			String line;
			while ((line = reader.readLine()) != null) {
				//if ( debugMode ) {
					System.out.println ("Matlab output: " + line);
				//}
			}


		} catch ( Exception e ) {
			e.printStackTrace();
		}

		return returnString;

	}

// broken, for trying to run online
	public void start() {
		throw new RuntimeException("This functionality is not implemented yet");
		//try {
		//	ProcessBuilder builder = new ProcessBuilder("matlab",
		//						"-nojvm",
		//						"-nosplash" );
		//	builder.redirectErrorStream(true);
		//	Process runningProcess = builder.start();

		//	//this.stdout = new BufferedReader( new InputStreamReader( runningProcess.getInputStream() ) );
		//	this.stdout = new Scanner( runningProcess.getInputStream() );
		//	this.stdin = new PrintWriter( runningProcess.getOutputStream() );

		//	for ( int i = 0; i < 10; i ++ ) {
		//			System.out.println ("Matlab output: " +  stdout.nextLine() );
		//	}

		//} catch ( Exception e ) {
		//	e.printStackTrace();
		//}
	}

	public void command( String thisCommand ) {
		throw new RuntimeException("This functionality is not implemented yet");
		//try {
		//	stdin.println( thisCommand );
		//	System.out.println("Issued a command, will this guy react?");

		//	for ( int i = 0; i < 1; i ++ ) {
		//			System.out.println ("Matlab output: " +  stdout.nextLine() );
		//	}

		//} catch ( Exception e ) {
		//	e.printStackTrace();
		//}
	}

	public void stop() {
		throw new RuntimeException("This functionality is not implemented yet");
		//try {
		//	stdout.close();
		//	stdin.close();
		//	runningProcess.destroy();
		//} catch ( Exception e ) {
		//	e.printStackTrace();
		//}
	}

	// used for testing
	//public static void main ( String [] args ) {

	//	MatlabScriptingKit testKit = new MatlabScriptingKit();


	//	testKit.start();
	//	if ( testKit.stdin == null ) {
	//		System.out.println( "onoz!");
	//		System.exit(1);
	//	}
	//	testKit.command("fprintf('hello world, I am matlab')");
	//	System.out.println("Will run a command I guess");
	//	testKit.command("x = 6*7");
	//	System.out.println("Ran a command I guess");

	//	testKit.command("whos");
	//	testKit.stop();
	//	
	//}



}
