#! /usr/bin/perl

open (AOL, "<", "ArithmeticOperatorList.txt") or die "Cannot open ArithmeticOperatorList.txt: $!";
#open (LOL, "<", "LogicalOperatorList.txt") or die "Cannot open LogicalOperatorList.txt: $!";

open (NI, ">", "NativeInterpretation.java") or die "Cannot open NativeInterpretation.java: $!";

print NI "package hephaestos.dl.semantics;\n\n";
print NI "import java.util.*;;\n";
print NI "import hephaestos.dl.syntax.*;;\n";
print NI "import java.lang.*;;\n\n";

print NI "public class NativeInterpretation implements Interpretation {\n\n";

# Declare operators
@arithmeticList = <AOL>;
print NI "\t//Arithmetic operators\n";
foreach ( @arithmeticList ) {

	@operator = split( " ", $_ );
	$name = @operator[0];
	$symbol = @operator[1];
	$arity = @operator[2];
	$interpretation = @operator[4];
	$fix = @operator[4];
	print "Found operator: $name\n";

	print NI "\tprotected final Operator $name = new Operator(\"$symbol\");\n";

}
print NI "\n"; 

print NI "\t//Comparison operators\n";
print NI "\tprotected final Operator gt = new Operator(\">\");\n";
print NI "\tprotected final Operator ge = new Operator(\">=\");\n";
print NI "\tprotected final Operator lt = new Operator(\"<\");\n";
print NI "\tprotected final Operator le = new Operator(\"<=\");\n";
print NI "\tprotected final Operator eq = new Operator(\"=\");\n\n";

####
#### Constructor
####
print NI "\tpublic NativeInterpretation () {\n\t}\n\n";

####
#### Term evaluator
####
print NI "\tpublic Real evaluateTerm( Term thisTerm, Valuation valuation) throws Exception {\n\n";
print NI "\t\tDouble doubleResult = null;\n";
print NI "\t\tReal result = null;\n\n";

# Base case: Real
print NI "\t\tif ( thisTerm instanceof Real ) {\n";
print NI "\t\t\ttry{\n";
print NI "\t\t\t\tresult = (Real)thisTerm;\n";
print NI "\t\t\t} catch ( Exception e ) {\n";
print NI "\t\t\t\tSystem.err.println(\"Exception encountered evaluating rule for base case Real\");\n";
print NI "\t\t\t\te.printStackTrace();\n\t\t\t}\n";

# Base case: RealVariable
print NI "\t\t} else if ( thisTerm instanceof RealVariable ) {\n";
print NI "\t\t\ttry{\n";
print NI "\t\t\t\tresult = valuation.get((RealVariable)thisTerm);\n";
print NI "\t\t\t} catch ( Exception e ) {\n";
print NI "\t\t\t\tSystem.err.println(\"Exception encountered evaluating rule for base case RealVariable\");\n";
print NI "\t\t\t\te.printStackTrace();\n\t\t\t}\n";

foreach ( @arithmeticList ) {
	@operator = split( " ", $_ );
	$name = @operator[0];
	$symbol = @operator[1];
	$arity = @operator[2];
	$interpretation = @operator[3];
	$fix = @operator[4];

	if ( ($fix == "infix") && ($arity == 2) ) {
		print NI "\t\t} else if ( thisTerm.operator.equals( $name ) ) {\n";
		print NI "\t\t\ttry {\n";
		print NI "\t\t\t\tdoubleResult = (evaluateTerm( (Term)(thisTerm.children.get(0)), valuation )).toDouble()\n";
			print NI "\t\t\t\t\t\t$interpretation (evaluateTerm( (Term)(thisTerm.children.get(1)), valuation )).toDouble();\n";
		print NI "\t\t\t\tresult = new Real( doubleResult.toString() );\n";
		print NI "\t\t\t} catch ( Exception e ) {\n";
		print NI "\t\t\t\tSystem.err.println(\"Exception encountered evaluating rule for operator :: $name ::\");\n";
		print NI "\t\t\t\te.printStackTrace();\n\t\t\t}\n";

	} elsif( ($fix == "prefix") && ($arity == 2)  ) {
		print NI "\t\t} else if ( thisTerm.operator.equals( $name ) ) {\n";
		print NI "\t\t\ttry {\n";
		print NI "\t\t\t\tdoubleResult = $interpretation( (evaluateTerm( (Term)(thisTerm.children.get(0)), valuation )).toDouble(),\n";
			print NI "\t\t\t\t\t\t(evaluateTerm( (Term)(thisTerm.children.get(1)), valuation )).toDouble() );\n";
		print NI "\t\t\t\tresult = new Real( doubleResult.toString() );\n";
		print NI "\t\t\t} catch ( Exception e ) {\n";
		print NI "\t\t\t\tSystem.err.println(\"Exception encountered evaluating rule for operator :: $name ::\");\n";
		print NI "\t\t\t\te.printStackTrace();\n\t\t\t}\n";

	} elsif ( ($fix == "prefix") && ($arity == 1) ) {
		print NI "\t\t} else if ( thisTerm.operator.equals( $name ) ) {\n";
		print NI "\t\t\ttry {\n";
		print NI "\t\t\t\tdoubleResult = $interpretation( (evaluateTerm( (Term)(thisTerm.children.get(0)), valuation ) ).toDouble() );\n";
		print NI "\t\t\t\tresult = new Real( doubleResult.toString() );\n";
		print NI "\t\t\t} catch ( Exception e ) {\n";
		print NI "\t\t\t\tSystem.err.println(\"Exception encountered evaluating rule for operator :: $name ::\");\n";
		print NI "\t\t\t\te.printStackTrace();\n\t\t\t}\n";

	}else {
		die "Don't know how to write a rule for operator :: $name ::";
	}



}
print NI "\t\t} else {\n";
print NI "\t\t\tthrow new Exception(\"This arithemtic operator is not implemented in the native interpretation: \" ";
print NI "+ thisTerm.getOperator().toString() );\n\t\t}\n\n";

print NI "\t\treturn result;\n";
print NI "\t}\n\n";

####
#### Formula evaluator
####
print NI "\tpublic Boolean evaluateFormula( dLFormula thisFormula, Valuation valuation ) throws Exception {\n\n";

print NI "\t\tif ( thisFormula instanceof TrueFormula ) {\n";
print NI "\t\t\treturn true;\n";
print NI "\t\t} else if ( thisFormula instanceof FalseFormula ) {\n";
print NI "\t\t\treturn false;\n";
print NI "\t\t} else if ( thisFormula instanceof ComparisonFormula ) {\n\n\n";
print NI "\t\t/**/ if ( thisFormula.getOperator().equals( gt ) ) {\n";
print NI "\t\t/**/ \treturn ( (evaluateTerm( ((ComparisonFormula)thisFormula).getLHS(), valuation ).toDouble())\n";
print NI "\t\t/**/\t\t> (evaluateTerm( ((ComparisonFormula)thisFormula).getRHS(), valuation ) ).toDouble());\n";
print NI "\t\t/**/\t} else if ( thisFormula.getOperator().equals( ge ) ) {\n";
print NI "\t\t/**/\t\treturn ( (evaluateTerm( ((ComparisonFormula)thisFormula).getLHS(), valuation ).toDouble()) \n";
print NI "\t\t/**/\t\t\t>= (evaluateTerm( ((ComparisonFormula)thisFormula).getRHS(), valuation ) ).toDouble());\n";
print NI "\t\t/**/\t}else if ( thisFormula.getOperator().equals( lt ) ) {\n";
print NI "\t\t/**/\t\treturn ( (evaluateTerm( ((ComparisonFormula)thisFormula).getLHS(), valuation ).toDouble())\n";
print NI "\t\t/**/\t\t\t< (evaluateTerm( ((ComparisonFormula)thisFormula).getRHS(), valuation ) ).toDouble());\n";
print NI "\t\t/**/\t}else if ( thisFormula.getOperator().equals( le ) ) {\n";
print NI "\t\t/**/\t\treturn ( (evaluateTerm( ((ComparisonFormula)thisFormula).getLHS(), valuation ).toDouble())\n";
print NI "\t\t/**/\t\t\t<= (evaluateTerm( ((ComparisonFormula)thisFormula).getRHS(), valuation ) ).toDouble());\n";
print NI "\t\t/**/\t}else if ( thisFormula.getOperator().equals( eq ) ) {\n";
print NI "\t\t/**/\t\treturn ( (evaluateTerm( ((ComparisonFormula)thisFormula).getLHS(), valuation )).equals(\n";
print NI "\t\t/**/\t\t\t (evaluateTerm( ((ComparisonFormula)thisFormula).getRHS(), valuation ) )));\n";
print NI "\t\t/**/\t} else {\n";
print NI "\t\t/**/\t\tthrow new Exception(\"This comparison operator is not implemented in the native interpretation: \"\n"; 
print NI "\t\t/**/\t\t\t+ thisFormula.getOperator().toString());\n";
print NI "\t\t/**/\t}\n";
print NI "\n\n";
print NI "\t\t} else if ( thisFormula instanceof NotFormula ) {\n";
print NI "\t\t\treturn (! evaluateFormula( ((NotFormula)thisFormula).getFormula(), valuation ) );\n";
print NI "\t\t} else if ( thisFormula instanceof AndFormula ) {\n";
print NI "\t\t\treturn (evaluateFormula( ((AndFormula)thisFormula).getLHS(), valuation ) \n";
print NI "\t\t\t\t&& evaluateFormula( ((AndFormula)thisFormula).getRHS(), valuation ));\n";
print NI "\t\t} else if ( thisFormula instanceof OrFormula ) {\n";
print NI "\t\t\treturn (evaluateFormula( ((OrFormula)thisFormula).getLHS(), valuation ) \n";
print NI "\t\t\t\t|| evaluateFormula( ((OrFormula)thisFormula).getRHS(), valuation ));\n";
print NI "\t\t} else if ( thisFormula instanceof ImpliesFormula ) {\n";
print NI "\t\t\treturn ( (! evaluateFormula( ((ImpliesFormula)thisFormula).getAntecedent(), valuation )) \n";
print NI "\t\t\t\t|| evaluateFormula( ((ImpliesFormula)thisFormula).getSuccedent(), valuation ) );\n";
print NI "\t\t} else if ( thisFormula instanceof IffFormula ) {\n";
print NI "\t\t\treturn ( ( (! evaluateFormula( ((IffFormula)thisFormula).getAntecedent(), valuation )) \n";
print NI "\t\t\t\t|| evaluateFormula( ((IffFormula)thisFormula).getSuccedent(), valuation ) )\n";
print NI "\t\t\t&& ( (! evaluateFormula( ((IffFormula)thisFormula).getSuccedent(), valuation )) \n";
print NI "\t\t\t\t|| evaluateFormula( ((IffFormula)thisFormula).getAntecedent(), valuation ) ) );\n";
print NI "\t\t} else {\n";
print NI "\t\t\tthrow new Exception(";
print NI "\"This logical operator is not implemented in the native interpretation: :: \"\n";
print NI "\t\t\t\t+ thisFormula.getOperator() + \" ::\");\n";
print NI "\t\t\t}\n";
print NI "\t\t}\n";

print NI "\t}\n";

close AOL or die "Couldn't close ArithmeticOperatorList.txt file properly: $!";
#close LOL or die "Couldn't close LogicalOperatorList.txt file properly: $!";
close NI or die "Couldn't close NativeInterpretation.java properly: $!";





