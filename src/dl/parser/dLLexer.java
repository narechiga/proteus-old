/* The following code was generated by JFlex 1.4.3 on 9/24/14 9:39 AM */

package hephaestos.dl.parser;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/24/14 9:39 AM from the specification file
 * <tt>dLLexer.lex</tt>
 */
public class dLLexer implements dLParser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SCHEMAS = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\14\1\0\1\17\1\15\22\0\1\70\1\12\4\0"+
    "\1\66\1\55\1\60\1\62\1\21\1\53\1\61\1\5\1\3\1\20"+
    "\12\2\1\51\1\16\1\7\1\11\1\10\1\52\1\0\4\1\1\6"+
    "\1\65\13\1\1\50\1\1\1\64\1\1\1\44\4\1\1\56\1\22"+
    "\1\57\1\63\1\1\1\0\1\27\1\40\1\33\1\42\1\4\1\31"+
    "\1\47\1\43\1\34\2\1\1\30\1\41\1\26\1\35\1\37\1\1"+
    "\1\25\1\36\1\24\1\32\1\45\1\46\1\23\2\1\1\54\1\67"+
    "\1\13\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\2\11\1\12\1\11\1\13\1\14\1\1\2\2"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\2\1\26\1\27\1\30\1\31\1\32"+
    "\1\3\1\0\1\33\1\0\1\5\2\0\1\34\1\0"+
    "\1\35\1\36\11\0\1\37\1\40\2\2\1\41\1\42"+
    "\2\2\1\43\1\44\1\3\1\0\1\45\2\46\2\0"+
    "\1\47\20\0\4\2\1\46\1\0\1\46\21\0\1\50"+
    "\1\2\1\51\1\2\21\0\1\52\1\53\4\0\1\54"+
    "\32\0\1\55\1\56\15\0\1\57\1\60\1\61\1\62"+
    "\4\0\1\63\3\0\1\64\5\0\1\65\2\0\1\66"+
    "\6\0\1\67\4\0\1\70\3\0\1\71\12\0\1\72"+
    "\2\0\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\162\0\u018f\0\162\0\u01c8\0\u0201\0\162\0\162"+
    "\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\253\0\u0357\0\162"+
    "\0\u0390\0\162\0\162\0\162\0\162\0\162\0\162\0\u03c9"+
    "\0\u0402\0\u043b\0\u0474\0\u04ad\0\162\0\162\0\u04e6\0\u051f"+
    "\0\162\0\u0558\0\162\0\u0591\0\u05ca\0\u0603\0\u063c\0\162"+
    "\0\162\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\162\0\162\0\u0876\0\u08af\0\162\0\162"+
    "\0\u08e8\0\u0921\0\162\0\162\0\u095a\0\u095a\0\162\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\162\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\162\0\u0eeb\0\u0a05\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\253\0\u12ed\0\253\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\253\0\253\0\u1728\0\u1761\0\u179a\0\u17d3\0\162"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\162\0\162\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\162\0\162\0\162\0\162\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\162\0\u219f\0\u21d8\0\u2211\0\162\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\162\0\u2367\0\u23a0\0\162\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\162\0\u252f\0\u2568"+
    "\0\u25a1\0\u25da\0\162\0\u2613\0\u264c\0\u2685\0\162\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\162\0\u28f8\0\u2931\0\162\0\162\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\5\1\24\4\5\1\25\16\5"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\4\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\20"+
    "\13\44\1\45\40\44\1\46\14\44\72\0\2\5\1\0"+
    "\1\5\1\0\1\5\14\0\26\5\13\0\2\5\5\0"+
    "\1\6\1\47\1\50\1\0\1\50\72\0\1\51\65\0"+
    "\1\52\3\0\1\53\70\0\1\53\75\0\1\20\66\0"+
    "\1\20\74\0\1\54\1\55\70\0\1\56\53\0\1\57"+
    "\2\0\1\60\1\61\14\0\1\62\1\0\1\63\1\0"+
    "\1\64\1\0\1\65\1\66\1\0\1\67\1\70\1\71"+
    "\1\0\1\72\13\0\1\73\1\74\12\0\2\5\1\0"+
    "\1\5\1\0\1\5\14\0\2\5\1\75\23\5\13\0"+
    "\2\5\4\0\2\5\1\0\1\5\1\0\1\5\14\0"+
    "\4\5\1\76\21\5\13\0\2\5\14\0\1\77\132\0"+
    "\1\100\16\0\2\5\1\0\1\5\1\0\1\5\14\0"+
    "\2\5\1\101\23\5\13\0\2\5\4\0\2\5\1\0"+
    "\1\5\1\0\1\5\14\0\4\5\1\102\21\5\13\0"+
    "\2\5\71\0\1\103\71\0\1\104\1\0\13\44\1\0"+
    "\40\44\1\0\14\44\2\0\1\47\1\0\1\50\1\0"+
    "\1\50\64\0\1\105\2\0\1\106\73\0\1\107\60\0"+
    "\14\54\1\110\1\111\53\54\21\112\1\113\47\112\21\0"+
    "\1\114\72\0\1\115\2\0\1\116\5\0\1\117\66\0"+
    "\1\120\2\0\1\121\61\0\1\122\74\0\1\123\2\0"+
    "\1\124\70\0\1\125\61\0\1\126\46\0\1\127\17\0"+
    "\1\130\6\0\1\131\62\0\1\132\100\0\1\133\70\0"+
    "\1\134\34\0\2\5\1\0\1\5\1\0\1\5\14\0"+
    "\7\5\1\135\16\5\13\0\2\5\4\0\2\5\1\0"+
    "\1\5\1\0\1\5\14\0\5\5\1\136\20\5\13\0"+
    "\2\5\4\0\2\5\1\0\1\5\1\0\1\5\14\0"+
    "\7\5\1\137\16\5\13\0\2\5\4\0\2\5\1\0"+
    "\1\5\1\0\1\5\14\0\5\5\1\140\20\5\13\0"+
    "\2\5\5\0\1\105\104\0\1\141\66\0\1\141\54\0"+
    "\21\112\1\142\67\112\1\143\1\142\47\112\24\0\1\144"+
    "\7\0\1\145\101\0\1\146\62\0\1\147\61\0\1\150"+
    "\100\0\1\151\56\0\1\152\70\0\1\153\67\0\1\154"+
    "\71\0\1\155\107\0\1\156\47\0\1\157\73\0\1\160"+
    "\104\0\1\161\62\0\1\162\65\0\1\163\77\0\1\164"+
    "\30\0\2\5\1\0\1\165\1\0\1\5\14\0\26\5"+
    "\13\0\2\5\4\0\2\5\1\0\1\5\1\0\1\5"+
    "\14\0\13\5\1\166\12\5\13\0\2\5\4\0\2\5"+
    "\1\0\1\167\1\0\1\5\14\0\26\5\13\0\2\5"+
    "\4\0\2\5\1\0\1\5\1\0\1\5\14\0\13\5"+
    "\1\170\12\5\13\0\2\5\3\0\20\112\1\141\1\142"+
    "\47\112\4\0\1\171\122\0\1\172\36\0\1\173\113\0"+
    "\1\174\45\0\1\175\116\0\1\176\73\0\1\177\66\0"+
    "\1\200\64\0\1\201\65\0\1\202\73\0\1\203\65\0"+
    "\1\204\70\0\1\205\50\0\1\206\124\0\1\207\56\0"+
    "\1\210\71\0\1\211\42\0\2\5\1\0\1\212\1\0"+
    "\1\5\14\0\26\5\13\0\2\5\4\0\2\5\1\0"+
    "\1\213\1\0\1\5\14\0\26\5\13\0\2\5\30\0"+
    "\1\214\67\0\1\215\74\0\1\216\65\0\1\217\101\0"+
    "\1\220\70\0\1\221\56\0\1\222\70\0\1\223\74\0"+
    "\1\224\65\0\1\225\70\0\1\226\77\0\1\227\40\0"+
    "\1\230\125\0\1\231\57\0\1\232\102\0\1\233\62\0"+
    "\1\234\62\0\1\235\100\0\1\236\67\0\1\237\62\0"+
    "\1\240\65\0\1\241\73\0\1\242\75\0\1\243\64\0"+
    "\1\244\75\0\1\245\67\0\1\246\62\0\1\247\107\0"+
    "\1\250\52\0\1\251\45\0\1\252\122\0\1\253\60\0"+
    "\1\254\71\0\1\255\131\0\1\256\37\0\1\257\72\0"+
    "\1\260\66\0\1\261\55\0\1\262\101\0\1\263\123\0"+
    "\1\264\30\0\1\265\67\0\1\266\110\0\1\267\50\0"+
    "\1\270\105\0\1\271\65\0\1\272\57\0\1\273\110\0"+
    "\1\274\24\0\1\275\70\0\1\276\113\0\1\277\75\0"+
    "\1\300\62\0\1\301\112\0\1\302\44\0\1\303\3\0"+
    "\1\304\66\0\1\305\100\0\1\306\57\0\1\307\72\0"+
    "\1\310\65\0\1\311\71\0\1\312\100\0\1\313\71\0"+
    "\1\314\36\0\1\315\113\0\1\316\65\0\1\317\100\0"+
    "\1\320\61\0\1\321\47\0\1\322\113\0\1\323\67\0"+
    "\1\324\103\0\1\325\75\0\1\326\51\0\1\327\75\0"+
    "\1\330\61\0\1\331\104\0\1\332\65\0\1\333\71\0"+
    "\1\334\71\0\1\335\57\0\1\336\77\0\1\337\36\0"+
    "\1\340\114\0\1\341\70\0\1\342\100\0\1\343\54\0"+
    "\1\344\73\0\1\345\45\0\1\346\114\0\1\347\44\0"+
    "\1\350\110\0\1\351\102\0\1\352\36\0\1\353\111\0"+
    "\1\354\47\0\1\355\122\0\1\356\70\0\1\357\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10602];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\5\1\1\11\1\1\1\11\2\1"+
    "\2\11\7\1\1\11\1\1\6\11\5\1\2\11\1\1"+
    "\1\0\1\11\1\0\1\11\2\0\1\1\1\0\2\11"+
    "\11\0\2\11\2\1\2\11\2\1\2\11\1\1\1\0"+
    "\1\11\2\1\2\0\1\11\20\0\4\1\1\11\1\0"+
    "\1\1\21\0\4\1\21\0\2\1\4\0\1\11\32\0"+
    "\2\11\15\0\4\11\4\0\1\11\3\0\1\11\5\0"+
    "\1\11\2\0\1\11\6\0\1\11\4\0\1\11\3\0"+
    "\1\11\12\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	int openBraceCount = 0;
	boolean debug = false;
	public Object getLVal() {
		//System.out.println("YYTEXT is: " + yytext() );
		return yytext();
	}

	public void yyerror ( String S ) {
		System.err.println( S );
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public dLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public dLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { openBraceCount = openBraceCount - 1; 
		if ( openBraceCount == 0 ) {
			if ( debug ) {
				System.out.println("Lexer: CLOSEBRACE");
			}
			yybegin( YYINITIAL );
			return CLOSEBRACE;			
		} else {
			if ( debug ) {
				System.out.println("Lexer: SCHEMATEXT");
			}
			return SCHEMATEXT;
		}
          }
        case 62: break;
        case 26: 
          { if ( openBraceCount == 0 ) {
			openBraceCount = openBraceCount + 1;
			if ( debug ) {
				System.out.println("Lexer: OPENBRACE");
			}
			return OPENBRACE;
		} else {
			openBraceCount = openBraceCount + 1;
			if ( debug ) {
				System.out.println("Lexer: SCHEMATEXT");
			}
			return SCHEMATEXT;
		}
          }
        case 63: break;
        case 58: 
          { if ( debug ) {
			System.out.println("Lexer: STATEVARIABLES");
			System.out.println("Lexer @ " + yytext() );
		}
		return STATEVARIABLES;
          }
        case 64: break;
        case 31: 
          { if ( debug ) {
			System.out.println("Lexer: OPENBOX");
			System.out.println("Lexer @ " + yytext() );
		}
		return OPENBOX;
          }
        case 65: break;
        case 59: 
          { if ( debug ) {
			System.out.println("Lexer: CONTROLTEMPLATE");
			System.out.println("Lexer @ " + yytext() );
		}
		return CONTROLTEMPLATE;
          }
        case 66: break;
        case 52: 
          { if ( debug ) { 
                        System.out.println("Lexer: SETTINGS");
                        System.out.println("Lexer @ " + yytext() );
                }
                return SETTINGS;
          }
        case 67: break;
        case 61: 
          { if ( debug ) {
			System.out.println("Lexer: ROBUSTPARAMETERS");
			System.out.println("Lexer @ " + yytext() );
		}
		return ROBUSTPARAMETERS;
          }
        case 68: break;
        case 4: 
          { if ( debug ) {
			System.out.println("Lexer: MINUS");
			System.out.println("Lexer @ " + yytext() );
		}
		return MINUS;
          }
        case 69: break;
        case 42: 
          { if ( debug ) {
			System.out.println("Lexer: FALSE");
			System.out.println("Lexer @ " + yytext() );
		}
		return FALSE;
          }
        case 70: break;
        case 34: 
          { if ( debug ) {
			System.out.println("Lexer: CUP");
			System.out.println("Lexer @ " + yytext() );
		}
		return CUP;
          }
        case 71: break;
        case 6: 
          { if ( debug ) {
			System.out.println("Lexer: EQUALS");
			System.out.println("Lexer @ " + yytext() );
		}
		return EQUALS;
          }
        case 72: break;
        case 12: 
          { if ( debug ) {
			System.out.println("Lexer: MULTIPLY");
			System.out.println("Lexer @ " + yytext() );
		}
		return MULTIPLY;
          }
        case 73: break;
        case 43: 
          { // for mathematica
		if ( debug ) {
			System.out.println("Lexer: FALSE");
			System.out.println("Lexer @ " + yytext() );
		}
		return FALSE;
          }
        case 74: break;
        case 45: 
          { if ( debug ) {
			System.out.println("Lexer: BOUNDS");
			System.out.println("Lexer @ " + yytext() );
		}
		return BOUNDS;
          }
        case 75: break;
        case 23: 
          { if ( debug ) {
			System.out.println("Lexer: OR");
			System.out.println("Lexer @ " + yytext() );
		}
		return OR;
          }
        case 76: break;
        case 30: 
          { if ( debug ) {
			System.out.println("Lexer: CLOSEDIAMOND");
			System.out.println("Lexer @ " + yytext() );
		}
		return CLOSEDIAMOND;
          }
        case 77: break;
        case 36: 
          { // For mathematica
		if ( debug ) {
			System.out.println("Lexer: OR");
			System.out.println("Lexer @ " + yytext() );
		}
		return OR;
          }
        case 78: break;
        case 22: 
          { if ( debug ) {
			System.out.println("Lexer: AND");
			System.out.println("Lexer @ " + yytext() );
		}
		return AND;
          }
        case 79: break;
        case 38: 
          { if ( debug ) {
			System.out.println("Lexer: comment");	
			System.out.println("Lexer @ " + yytext() );
		}
          }
        case 80: break;
        case 9: 
          { if ( debug ) {
			System.out.println("Lexer: space");
			System.out.println("Lexer @ " + yytext() );
		}
          }
        case 81: break;
        case 51: 
          { if ( debug ) {
			System.out.println("Lexer: FORALL");
			System.out.println("Lexer @ " + yytext() );
		}
		return FORALL;
          }
        case 82: break;
        case 49: 
          { if ( debug ) {
			System.out.println("Lexer: EXISTS");
			System.out.println("Lexer @ " + yytext() );
		}
		return EXISTS;
          }
        case 83: break;
        case 47: 
          { if ( debug ) {
			System.out.println("Lexer: PROBLEM");
			System.out.println("Lexer @ " + yytext() );
		}
		return PROBLEM;
          }
        case 84: break;
        case 20: 
          { if ( debug ) {
			System.out.println("Lexer: RPAREN");
			System.out.println("Lexer @ " + yytext() );
		}
		return RPAREN;
          }
        case 85: break;
        case 5: 
          { if ( debug ) {
			System.out.println("Lexer: INEQUALITY");
			System.out.println("Lexer @ " + yytext() );
		}
		return INEQUALITY;
          }
        case 86: break;
        case 29: 
          { if ( debug ) {
			System.out.println("Lexer: OPENDIAMOND");
			System.out.println("Lexer @ " + yytext() );
		}
		return OPENDIAMOND;
          }
        case 87: break;
        case 44: 
          { if ( debug ) {
			System.out.println("Lexer: RULES");
			System.out.println("Lexer @ " + yytext() );
		}
		yybegin( SCHEMAS ); return RULES;
          }
        case 88: break;
        case 11: 
          { if ( debug ) {
			System.out.println("Lexer: DIVIDE");
			System.out.println("Lexer @ " + yytext() );
		}
		return DIVIDE;
          }
        case 89: break;
        case 17: 
          { if ( debug ) {
			System.out.println("Lexer: PRIME");
			System.out.println("Lexer @ " + yytext() );
		}
		return PRIME;
          }
        case 90: break;
        case 24: 
          { if ( debug ) {
			System.out.println("Lexer: SCHEMATEXT");
		}
		return SCHEMATEXT;
          }
        case 91: break;
        case 60: 
          { if ( debug ) {
			System.out.println("Lexer: SCHEMAVARIABLES");
			System.out.println("Lexer @ " + yytext() );
		}
		yybegin( SCHEMAS ); 
		return SCHEMAVARIABLES;
          }
        case 92: break;
        case 39: 
          { if ( debug ) {
			System.out.println("Lexer: KLEENESTAR");
			System.out.println("Lexer @ " + yytext() );
		}
		return KLEENESTAR;
          }
        case 93: break;
        case 1: 
          { System.out.println("Lexer: I'm confused, throwing error");
		System.out.println("Lexer @ " + yytext() );
		return dLParser.YYERROR;
          }
        case 94: break;
        case 2: 
          { if ( debug ) {
			System.out.println("Lexer: IDENTIFIER");
			System.out.println("Lexer @ " + yytext() );
		}
		return IDENTIFIER;
          }
        case 95: break;
        case 57: 
          { if ( debug ) {
			System.out.println("Lexer: EIPARAMETERS");
			System.out.println("Lexer @ " + yytext() );
		}
		return EIPARAMETERS;
          }
        case 96: break;
        case 56: 
          { if ( debug ) {
			System.out.println("Lexer: ANNOTATION");
			System.out.println("Lexer @ " + yytext() );
		}
		return ANNOTATION;
          }
        case 97: break;
        case 18: 
          { if ( debug ) {
			System.out.println("Lexer: LPAREN");
			System.out.println("Lexer @ " + yytext() );
		}
		return LPAREN;
          }
        case 98: break;
        case 54: 
          { if ( debug ) {
			System.out.println("Lexer: INVARIANT");
			System.out.println("Lexer @ " + yytext() );
		}
		return INVARIANT;
          }
        case 99: break;
        case 35: 
          { // For mathematica
		if ( debug ) {
			System.out.println("Lexer: AND");
			System.out.println("Lexer @ " + yytext() );
		}
		return AND;
          }
        case 100: break;
        case 40: 
          { if ( debug ) {
			System.out.println("Lexer: TRUE");
			System.out.println("Lexer @ " + yytext() );
		}
		return TRUE;
          }
        case 101: break;
        case 27: 
          { if ( debug ) {
			System.out.println("Lexer: IMPLIES");
			System.out.println("Lexer @ " + yytext() );
		}
		return IMPLIES;
          }
        case 102: break;
        case 14: 
          { if ( debug ) {
			System.out.println("Lexer: TEST");
			System.out.println("Lexer @ " + yytext() );
		}
		return TEST;
          }
        case 103: break;
        case 41: 
          { // for mathematica
		if ( debug ) {
			System.out.println("Lexer: TRUE");
			System.out.println("Lexer @ " + yytext() );
		}
		return TRUE;
          }
        case 104: break;
        case 10: 
          { if ( debug ) {
			System.out.println("Lexer: SEMICOLON");
			System.out.println("Lexer @ " + yytext() );
		}
		return SEMICOLON;
          }
        case 105: break;
        case 37: 
          { if ( debug ) {
			System.out.println("Lexer: IFF");
			System.out.println("Lexer @ " + yytext() );
		}
		return IFF;
          }
        case 106: break;
        case 28: 
          { if ( debug ) {
			System.out.println("Lexer: RANDOM");
			System.out.println("Lexer @ " + yytext() );
		}
		return RANDOM;
          }
        case 107: break;
        case 15: 
          { if ( debug ) {
			System.out.println("Lexer: PLUS");
			System.out.println("Lexer @ " + yytext() );
		}
		return PLUS;
          }
        case 108: break;
        case 21: 
          { if ( debug ) {
			System.out.println("Lexer: POWER");
			System.out.println("Lexer @ " + yytext() );
		}
		return POWER;
          }
        case 109: break;
        case 50: 
          { if ( debug ) {
			System.out.println("Lexer: ENVELOPE");
			System.out.println("Lexer @ " + yytext() );
		}
		return ENVELOPE;
          }
        case 110: break;
        case 3: 
          { if ( debug ) {
			System.out.println("Lexer: NUMBER");
			System.out.println("Lexer @ " + yytext() );
		}
		return NUMBER;
          }
        case 111: break;
        case 55: 
          { if ( debug ) {
			System.out.println("Lexer: CONTROLLAW");
			System.out.println("Lexer @ " + yytext() );
		}
		return CONTROLLAW;
          }
        case 112: break;
        case 16: 
          { if ( debug ) {
			System.out.println("Lexer: OPENBRACE");
			System.out.println("Lexer @ " + yytext() );
		}
		return OPENBRACE;
          }
        case 113: break;
        case 13: 
          { if ( debug ) {
			System.out.println("Lexer: REALDECLARATION");
			System.out.println("Lexer @ " + yytext() );
		}
		return REALDECLARATION;
          }
        case 114: break;
        case 46: 
          { if ( debug ) {
			System.out.println("Lexer: DOMAIN");
			System.out.println("Lexer @ " + yytext() );
		}
		return DOMAIN;
          }
        case 115: break;
        case 33: 
          { if ( debug ) {
			System.out.println("Lexer: ASSIGN");
			System.out.println("Lexer @ " + yytext() );
		}
		return ASSIGN;
          }
        case 116: break;
        case 7: 
          { if ( debug ) {
			System.out.println("Lexer: NOT");
			System.out.println("Lexer @ " + yytext() );
		}
		return NOT;
          }
        case 117: break;
        case 32: 
          { if ( debug ) {
			System.out.println("Lexer: CLOSEBOX");
			System.out.println("Lexer @ " + yytext() );
		}
		return CLOSEBOX;
          }
        case 118: break;
        case 53: 
          { if ( debug ) {
			System.out.println("Lexer: FUNCTIONS");
			System.out.println("Lexer @ " + yytext() );
		}
		return FUNCTIONS;
          }
        case 119: break;
        case 19: 
          { if ( debug ) {
			System.out.println("Lexer: COMMA");
			System.out.println("Lexer @ " + yytext() );
		}
		return COMMA;
          }
        case 120: break;
        case 48: 
          { if ( debug ) {
			System.out.println("Lexer: EXTERNAL");
			System.out.println("Lexer @ " + yytext() );
		}
		return EXTERNAL;
          }
        case 121: break;
        case 8: 
          { if ( debug ) {
			System.out.println("Lexer: CLOSEBRACE");
			System.out.println("Lexer @ " + yytext() );
		}
		return CLOSEBRACE;
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
